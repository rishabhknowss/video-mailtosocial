// prisma/schema.prisma
// This is your Prisma schema file - updated to include broll fields

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
enum ProjectStatus {
  DRAFT
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  videoUrl      String? 
  audioUrl      String?
  voice_id      String?   
  createdAt     DateTime  @default(now())
  projects      Project[]
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
}

model Project {
  id              Int      @id @default(autoincrement())
  title           String
  userId          String 
  script          String?  @db.Text
  outputUrl       String?  
  status          ProjectStatus @default(DRAFT)
  keywords        String[] // Added for storing broll keywords
  brollImages     String[] // Added for storing broll image URLs
  brollVideoUrl   String?  // Added for storing the broll video URL
  finalVideoUrl   String?  // Added for storing the final merged video URL
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}